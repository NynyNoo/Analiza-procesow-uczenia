R version 4.3.0 (2023-04-21 ucrt) -- "Already Tomorrow"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd("D:/MGR/APU/lab6")
> library(reticulate)
> use_condaenv("apu")
> library("keras")
> library("tensorflow")
> 
> cifar <- dataset_cifar100()
> 
> x_train <- cifar$train$x
> x_test <- cifar$test$x
> y_train <- cifar$train$y
> y_test <- cifar$test$y
> 
> #set up data
> #normalize
> x_train <- x_train / 255
> x_test <- x_test / 255
> 
> #set classes
> y_train <- to_categorical(y_train, num_classes = 100)
> y_test <- to_categorical(y_test, num_classes = 100)
> 
> #create model
> model <- keras_model_sequential() %>%
+     layer_flatten(input_shape = c(32, 32, 3)) %>%
+     layer_dense(units = 128, activation = "relu") %>%
+     layer_dense(units = 100, activation = "softmax")
2023-06-07 15:11:45.107346: I tensorflow/core/platform/cpu_feature_guard.cc:193] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-06-07 15:11:45.108431: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.
> 
> #print model
> summary(model)
Model: "sequential"
_________________________________________________________________________________________
 Layer (type)                           Output Shape                       Param #       
=========================================================================================
 flatten (Flatten)                      (None, 3072)                       0             
 dense_1 (Dense)                        (None, 128)                        393344        
 dense (Dense)                          (None, 100)                        12900         
=========================================================================================
Total params: 406,244
Trainable params: 406,244
Non-trainable params: 0
_________________________________________________________________________________________
> 
> #set model parameters
> model %>% compile(
+     loss = "categorical_crossentropy",      #calculate loss
+     optimizer = optimizer_adam(),           #optimization
+     metrics = c("accuracy")                 #accuracy
+ )
> 
> #train model
> history <- model %>%
+     fit(
+         x_train, y_train,
+         epochs = 50,
+         batch_size = 128,
+         validation_split = 0.15
+     )
Epoch 1/50
333/333 [==============================] - 3s 7ms/step - loss: 4.3821 - accuracy: 0.0352 - val_loss: 4.1422 - val_accuracy: 0.0609
Epoch 2/50
333/333 [==============================] - 2s 5ms/step - loss: 4.0480 - accuracy: 0.0750 - val_loss: 4.0107 - val_accuracy: 0.0865
Epoch 3/50
333/333 [==============================] - 2s 5ms/step - loss: 3.9499 - accuracy: 0.0928 - val_loss: 3.9686 - val_accuracy: 0.0881
Epoch 4/50
333/333 [==============================] - 1s 4ms/step - loss: 3.8954 - accuracy: 0.0996 - val_loss: 3.8809 - val_accuracy: 0.1076
Epoch 5/50
333/333 [==============================] - 1s 4ms/step - loss: 3.8528 - accuracy: 0.1089 - val_loss: 3.8746 - val_accuracy: 0.1063
Epoch 6/50
333/333 [==============================] - 1s 4ms/step - loss: 3.8302 - accuracy: 0.1119 - val_loss: 3.8598 - val_accuracy: 0.1115
Epoch 7/50
333/333 [==============================] - 1s 4ms/step - loss: 3.8110 - accuracy: 0.1179 - val_loss: 3.8571 - val_accuracy: 0.1113
Epoch 8/50
333/333 [==============================] - 1s 4ms/step - loss: 3.8004 - accuracy: 0.1185 - val_loss: 3.8632 - val_accuracy: 0.1109
Epoch 9/50
333/333 [==============================] - 1s 4ms/step - loss: 3.7877 - accuracy: 0.1191 - val_loss: 3.8259 - val_accuracy: 0.1149
Epoch 10/50
333/333 [==============================] - 1s 4ms/step - loss: 3.7716 - accuracy: 0.1233 - val_loss: 3.8076 - val_accuracy: 0.1165
Epoch 11/50
333/333 [==============================] - 1s 4ms/step - loss: 3.7568 - accuracy: 0.1263 - val_loss: 3.8191 - val_accuracy: 0.1136
Epoch 12/50
333/333 [==============================] - 1s 3ms/step - loss: 3.7485 - accuracy: 0.1276 - val_loss: 3.8046 - val_accuracy: 0.1149
Epoch 13/50
333/333 [==============================] - 1s 4ms/step - loss: 3.7366 - accuracy: 0.1310 - val_loss: 3.7859 - val_accuracy: 0.1277
Epoch 14/50
333/333 [==============================] - 1s 3ms/step - loss: 3.7260 - accuracy: 0.1332 - val_loss: 3.7940 - val_accuracy: 0.1205
Epoch 15/50
333/333 [==============================] - 1s 3ms/step - loss: 3.7201 - accuracy: 0.1334 - val_loss: 3.7789 - val_accuracy: 0.1277
Epoch 16/50
333/333 [==============================] - 1s 4ms/step - loss: 3.7117 - accuracy: 0.1333 - val_loss: 3.8061 - val_accuracy: 0.1229
Epoch 17/50
333/333 [==============================] - 1s 3ms/step - loss: 3.7072 - accuracy: 0.1362 - val_loss: 3.7543 - val_accuracy: 0.1299
Epoch 18/50
333/333 [==============================] - 1s 4ms/step - loss: 3.7026 - accuracy: 0.1350 - val_loss: 3.8186 - val_accuracy: 0.1197
Epoch 19/50
333/333 [==============================] - 1s 4ms/step - loss: 3.7128 - accuracy: 0.1333 - val_loss: 3.7843 - val_accuracy: 0.1227
Epoch 20/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6945 - accuracy: 0.1368 - val_loss: 3.7472 - val_accuracy: 0.1323
Epoch 21/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6914 - accuracy: 0.1370 - val_loss: 3.7804 - val_accuracy: 0.1263
Epoch 22/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6865 - accuracy: 0.1392 - val_loss: 3.7724 - val_accuracy: 0.1243
Epoch 23/50
333/333 [==============================] - 2s 5ms/step - loss: 3.6829 - accuracy: 0.1388 - val_loss: 3.7464 - val_accuracy: 0.1324
Epoch 24/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6744 - accuracy: 0.1418 - val_loss: 3.7497 - val_accuracy: 0.1307
Epoch 25/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6686 - accuracy: 0.1427 - val_loss: 3.7388 - val_accuracy: 0.1339
Epoch 26/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6697 - accuracy: 0.1407 - val_loss: 3.7364 - val_accuracy: 0.1321
Epoch 27/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6634 - accuracy: 0.1425 - val_loss: 3.7474 - val_accuracy: 0.1325
Epoch 28/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6574 - accuracy: 0.1460 - val_loss: 3.7306 - val_accuracy: 0.1340
Epoch 29/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6548 - accuracy: 0.1453 - val_loss: 3.7225 - val_accuracy: 0.1335
Epoch 30/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6472 - accuracy: 0.1468 - val_loss: 3.7333 - val_accuracy: 0.1348
Epoch 31/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6456 - accuracy: 0.1473 - val_loss: 3.7452 - val_accuracy: 0.1340
Epoch 32/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6426 - accuracy: 0.1479 - val_loss: 3.7334 - val_accuracy: 0.1396
Epoch 33/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6411 - accuracy: 0.1480 - val_loss: 3.7240 - val_accuracy: 0.1340
Epoch 34/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6353 - accuracy: 0.1482 - val_loss: 3.8225 - val_accuracy: 0.1175
Epoch 35/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6371 - accuracy: 0.1463 - val_loss: 3.7207 - val_accuracy: 0.1372
Epoch 36/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6285 - accuracy: 0.1488 - val_loss: 3.7713 - val_accuracy: 0.1243
Epoch 37/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6291 - accuracy: 0.1480 - val_loss: 3.7795 - val_accuracy: 0.1224
Epoch 38/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6257 - accuracy: 0.1487 - val_loss: 3.7412 - val_accuracy: 0.1312
Epoch 39/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6212 - accuracy: 0.1506 - val_loss: 3.7192 - val_accuracy: 0.1328
Epoch 40/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6136 - accuracy: 0.1522 - val_loss: 3.7245 - val_accuracy: 0.1397
Epoch 41/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6152 - accuracy: 0.1511 - val_loss: 3.7283 - val_accuracy: 0.1360
Epoch 42/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6095 - accuracy: 0.1534 - val_loss: 3.7706 - val_accuracy: 0.1281
Epoch 43/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6138 - accuracy: 0.1515 - val_loss: 3.7586 - val_accuracy: 0.1297
Epoch 44/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6028 - accuracy: 0.1551 - val_loss: 3.7117 - val_accuracy: 0.1365
Epoch 45/50
333/333 [==============================] - 1s 4ms/step - loss: 3.5992 - accuracy: 0.1542 - val_loss: 3.6968 - val_accuracy: 0.1377
Epoch 46/50
333/333 [==============================] - 1s 4ms/step - loss: 3.6023 - accuracy: 0.1540 - val_loss: 3.7034 - val_accuracy: 0.1359
Epoch 47/50
333/333 [==============================] - 1s 4ms/step - loss: 3.5996 - accuracy: 0.1529 - val_loss: 3.7107 - val_accuracy: 0.1351
Epoch 48/50
333/333 [==============================] - 1s 4ms/step - loss: 3.5948 - accuracy: 0.1537 - val_loss: 3.6962 - val_accuracy: 0.1365
Epoch 49/50
333/333 [==============================] - 1s 4ms/step - loss: 3.5937 - accuracy: 0.1555 - val_loss: 3.7291 - val_accuracy: 0.1337
Epoch 50/50
333/333 [==============================] - 1s 4ms/step - loss: 3.5897 - accuracy: 0.1543 - val_loss: 3.7335 - val_accuracy: 0.1363
> 
> #check model quality 
> model %>% evaluate(x_test, y_test)
313/313 [==============================] - 0s 1ms/step - loss: 3.7560 - accuracy: 0.1353
    loss accuracy 
3.756027 0.135300 
> 
> #predict
> model %>% predict(x_test) %>% k_argmin()
313/313 [==============================] - 0s 1ms/step
tf.Tensor([53 53 68 ... 20 49 52], shape=(10000), dtype=int64)
> 
> 
> cifar <- dataset_cifar100()
> 
> x_train <- cifar$train$x
> x_test <- cifar$test$x
> y_train <- cifar$train$y
> y_test <- cifar$test$y
> x_train <- array_reshape(x_train, c(nrow(x_train), 3072))
> x_train <- x_train / 255                                  
> 
> x_test <- array_reshape(x_test, c(nrow(x_test), 3072))
> x_test <- x_test / 255
> 
> y_train <- to_categorical(y_train, num_classes = 100)
> y_test <- to_categorical(y_test, num_classes = 100)
> 
> model <- keras_model_sequential() %>%
+     layer_dense(units = 256, activation = "relu", input_shape = c(3072)) %>%   
+     layer_dropout(rate = 0.25) %>%                                            
+     layer_dense(units = 128, activation = "relu") %>%
+     layer_dropout(rate = 0.25) %>%
+     layer_dense(units = 64, activation = "relu") %>%
+     layer_dropout(rate = 0.25) %>%
+     layer_dense(units = 100, activation = "relu")
> 
> 
> summary(model)
Model: "sequential_1"
_________________________________________________________________________________________
 Layer (type)                           Output Shape                       Param #       
=========================================================================================
 dense_5 (Dense)                        (None, 256)                        786688        
 dropout_2 (Dropout)                    (None, 256)                        0             
 dense_4 (Dense)                        (None, 128)                        32896         
 dropout_1 (Dropout)                    (None, 128)                        0             
 dense_3 (Dense)                        (None, 64)                         8256          
 dropout (Dropout)                      (None, 64)                         0             
 dense_2 (Dense)                        (None, 100)                        6500          
=========================================================================================
Total params: 834,340
Trainable params: 834,340
Non-trainable params: 0
_________________________________________________________________________________________
> 
> model %>% compile(
+     loss = "categorical_crossentropy",     #calculate loss
+     optimizer = optimizer_adam(),          #optimization
+     metrics = c("accuracy")                #accuracy
+ )
> 
> history <- model %>%
+     fit(
+         x_train, y_train,          #input
+         epochs = 50,               
+         batch_size = 128,          #128 pictures
+         validation_split = 0.15
+     )
Epoch 1/50
333/333 [==============================] - 3s 8ms/step - loss: 6.3476 - accuracy: 0.0099 - val_loss: 5.0520 - val_accuracy: 0.0076
Epoch 2/50
333/333 [==============================] - 2s 7ms/step - loss: 5.0353 - accuracy: 0.0097 - val_loss: 4.9371 - val_accuracy: 0.0104
Epoch 3/50
333/333 [==============================] - 2s 7ms/step - loss: 4.9558 - accuracy: 0.0094 - val_loss: 4.9359 - val_accuracy: 0.0081
Epoch 4/50
333/333 [==============================] - 2s 7ms/step - loss: 4.9377 - accuracy: 0.0112 - val_loss: 4.9186 - val_accuracy: 0.0139
Epoch 5/50
333/333 [==============================] - 2s 7ms/step - loss: 4.9018 - accuracy: 0.0142 - val_loss: 4.8227 - val_accuracy: 0.0155
Epoch 6/50
333/333 [==============================] - 2s 7ms/step - loss: 4.8500 - accuracy: 0.0186 - val_loss: 4.8141 - val_accuracy: 0.0139
Epoch 7/50
333/333 [==============================] - 2s 7ms/step - loss: 4.8319 - accuracy: 0.0199 - val_loss: 4.7640 - val_accuracy: 0.0196
Epoch 8/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7940 - accuracy: 0.0220 - val_loss: 4.7484 - val_accuracy: 0.0217
Epoch 9/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7907 - accuracy: 0.0233 - val_loss: 4.7808 - val_accuracy: 0.0187
Epoch 10/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7919 - accuracy: 0.0225 - val_loss: 4.7168 - val_accuracy: 0.0256
Epoch 11/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7935 - accuracy: 0.0231 - val_loss: 4.8612 - val_accuracy: 0.0192
Epoch 12/50
333/333 [==============================] - 2s 6ms/step - loss: 4.7894 - accuracy: 0.0224 - val_loss: 4.7131 - val_accuracy: 0.0239
Epoch 13/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7614 - accuracy: 0.0236 - val_loss: 4.7115 - val_accuracy: 0.0229
Epoch 14/50
333/333 [==============================] - 2s 6ms/step - loss: 4.8180 - accuracy: 0.0218 - val_loss: 4.7474 - val_accuracy: 0.0221
Epoch 15/50
333/333 [==============================] - 2s 6ms/step - loss: 4.7593 - accuracy: 0.0258 - val_loss: 4.6984 - val_accuracy: 0.0315
Epoch 16/50
333/333 [==============================] - 2s 6ms/step - loss: 4.7316 - accuracy: 0.0280 - val_loss: 4.7117 - val_accuracy: 0.0296
Epoch 17/50
333/333 [==============================] - 2s 6ms/step - loss: 4.7210 - accuracy: 0.0305 - val_loss: 4.7161 - val_accuracy: 0.0316
Epoch 18/50
333/333 [==============================] - 2s 6ms/step - loss: 4.7229 - accuracy: 0.0308 - val_loss: 4.6831 - val_accuracy: 0.0377
Epoch 19/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6965 - accuracy: 0.0338 - val_loss: 4.6996 - val_accuracy: 0.0244
Epoch 20/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6974 - accuracy: 0.0351 - val_loss: 4.8068 - val_accuracy: 0.0244
Epoch 21/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7403 - accuracy: 0.0300 - val_loss: 4.6515 - val_accuracy: 0.0389
Epoch 22/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6700 - accuracy: 0.0364 - val_loss: 4.6301 - val_accuracy: 0.0392
Epoch 23/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7744 - accuracy: 0.0275 - val_loss: 4.6882 - val_accuracy: 0.0351
Epoch 24/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7022 - accuracy: 0.0337 - val_loss: 4.6457 - val_accuracy: 0.0391
Epoch 25/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6715 - accuracy: 0.0369 - val_loss: 4.6204 - val_accuracy: 0.0492
Epoch 26/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6525 - accuracy: 0.0393 - val_loss: 4.6069 - val_accuracy: 0.0413
Epoch 27/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6550 - accuracy: 0.0382 - val_loss: 4.7919 - val_accuracy: 0.0221
Epoch 28/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7242 - accuracy: 0.0317 - val_loss: 4.6593 - val_accuracy: 0.0405
Epoch 29/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6758 - accuracy: 0.0351 - val_loss: 4.6445 - val_accuracy: 0.0363
Epoch 30/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7060 - accuracy: 0.0336 - val_loss: 4.6024 - val_accuracy: 0.0467
Epoch 31/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6579 - accuracy: 0.0391 - val_loss: 4.5820 - val_accuracy: 0.0463
Epoch 32/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6251 - accuracy: 0.0413 - val_loss: 4.5781 - val_accuracy: 0.0484
Epoch 33/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6098 - accuracy: 0.0432 - val_loss: 4.5631 - val_accuracy: 0.0493
Epoch 34/50
333/333 [==============================] - 2s 6ms/step - loss: 4.6090 - accuracy: 0.0438 - val_loss: 4.5399 - val_accuracy: 0.0519
Epoch 35/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6118 - accuracy: 0.0420 - val_loss: 4.5424 - val_accuracy: 0.0512
Epoch 36/50
333/333 [==============================] - 2s 7ms/step - loss: 4.5909 - accuracy: 0.0454 - val_loss: 4.5521 - val_accuracy: 0.0497
Epoch 37/50
333/333 [==============================] - 2s 6ms/step - loss: 4.6518 - accuracy: 0.0401 - val_loss: 4.5779 - val_accuracy: 0.0507
Epoch 38/50
333/333 [==============================] - 2s 6ms/step - loss: 4.6217 - accuracy: 0.0413 - val_loss: 4.5410 - val_accuracy: 0.0509
Epoch 39/50
333/333 [==============================] - 2s 6ms/step - loss: 4.5991 - accuracy: 0.0446 - val_loss: 4.5458 - val_accuracy: 0.0429
Epoch 40/50
333/333 [==============================] - 2s 6ms/step - loss: 4.5834 - accuracy: 0.0441 - val_loss: 4.5258 - val_accuracy: 0.0493
Epoch 41/50
333/333 [==============================] - 2s 6ms/step - loss: 4.6271 - accuracy: 0.0424 - val_loss: 4.5340 - val_accuracy: 0.0543
Epoch 42/50
333/333 [==============================] - 2s 7ms/step - loss: 4.5884 - accuracy: 0.0463 - val_loss: 4.5270 - val_accuracy: 0.0528
Epoch 43/50
333/333 [==============================] - 2s 6ms/step - loss: 4.5678 - accuracy: 0.0484 - val_loss: 4.7199 - val_accuracy: 0.0323
Epoch 44/50
333/333 [==============================] - 2s 7ms/step - loss: 4.6353 - accuracy: 0.0381 - val_loss: 4.5699 - val_accuracy: 0.0481
Epoch 45/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7505 - accuracy: 0.0330 - val_loss: 4.5985 - val_accuracy: 0.0480
Epoch 46/50
333/333 [==============================] - 2s 6ms/step - loss: 4.6462 - accuracy: 0.0430 - val_loss: 4.5458 - val_accuracy: 0.0575
Epoch 47/50
333/333 [==============================] - 2s 6ms/step - loss: 4.6232 - accuracy: 0.0423 - val_loss: 4.5296 - val_accuracy: 0.0564
Epoch 48/50
333/333 [==============================] - 2s 6ms/step - loss: 4.5933 - accuracy: 0.0471 - val_loss: 4.5215 - val_accuracy: 0.0560
Epoch 49/50
333/333 [==============================] - 2s 6ms/step - loss: 4.5701 - accuracy: 0.0469 - val_loss: 4.5061 - val_accuracy: 0.0561
Epoch 50/50
333/333 [==============================] - 2s 7ms/step - loss: 4.7073 - accuracy: 0.0346 - val_loss: 4.6389 - val_accuracy: 0.0405
> 
> model %>% evaluate(x_test, y_test)
313/313 [==============================] - 1s 2ms/step - loss: 4.6274 - accuracy: 0.0417
    loss accuracy 
4.627412 0.041700 